{"version":3,"sources":["components/Cards/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["card","props","classname","className","key","id","onClick","handleClick","clicked","src","image","alt","name","wrapper","children","title","App","state","cards","score","topScore","message","cardOrder","forEach","index","setState","sort","Math","random","newScore","newTopScore","Wrapper","Title","this","console","log","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"kuGAceA,MAXf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKC,UAAU,QAAQC,IAAKH,EAAMI,GAClCC,QAAS,kBAAML,EAAMM,YAAYN,EAAMI,GAAIJ,EAAMO,WAC7C,yBAAOC,IAAKR,EAAMS,MAAOC,IAAKV,EAAMW,U,MCDrCC,MAJf,SAAiBZ,GACf,OAAO,yBAAKE,UAAU,WAAWF,EAAMa,W,MCG1BC,MAJf,SAAed,GACb,OAAO,wBAAIE,UAAU,SAASF,EAAMa,W,OCsFvBE,E,4MAlFbC,MAAQ,CACNC,MAAOA,EACPC,MAAO,EACPC,SAAU,EACVC,QAAS,uD,EAEXd,YAAc,SAACF,EAAIG,GAEjB,IAAMc,EAAY,EAAKL,MAAMC,MAE7B,GAAIV,EAIF,OAHAc,EAAUC,SAAQ,SAACvB,EAAMwB,GACvBF,EAAUE,GAAOhB,SAAU,KAEtB,EAAKiB,SAAS,CACnBzB,KAAMsB,EAAUI,MAAK,kBAAMC,KAAKC,SAAW,MAC3CP,QAAS,qBACTF,MAAO,IAITG,EAAUC,SAAQ,SAACvB,EAAMwB,GACnBnB,IAAOL,EAAKK,KACdiB,EAAUE,GAAOhB,SAAU,MAH5B,MAOyB,EAAKS,MAAzBG,EAPL,EAOKA,SACFS,EARH,EAOeV,MACO,EACnBW,EAAcD,EAAWT,EAAWS,EAAWT,EAErD,OAAO,EAAKK,SAAS,CACnBzB,KAAMsB,EAAUI,MAAK,kBAAMC,KAAKC,SAAW,MAC3CP,QAAS,qBACTF,MAAOU,EACPT,SAAUU,K,uDAMN,IAAD,OACP,OACE,6BAEE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,yBAAK7B,UAAU,eACb,wBAAIE,GAAG,iBAAiB4B,KAAKhB,MAAMI,UAErC,yBAAKlB,UAAU,0BACb,2BAAG,0CAAH,IAA4B8B,KAAKhB,MAAME,MAAvC,MAAgD,8CAAhD,IAA6Ec,KAAKhB,MAAMG,YAG3Fc,QAAQC,IAAIF,KAAKhB,MAAMC,OACxB,yBAAKf,UAAU,OACZ8B,KAAKhB,MAAMC,MAAMkB,KAAI,SAAAlB,GAEpB,OAGE,yBAAKf,UAAU,iBAAf,IAAgC,kBAAC,EAAD,CAC9BE,GAAIa,EAAMb,GACVD,IAAKc,EAAMb,GACXK,MAAOQ,EAAMR,MACbE,KAAMM,EAAMN,KACZZ,KAAMkB,EAAMlB,KACZQ,QAASU,EAAMV,QACfD,YAAa,EAAKA,kBAb1B,Y,GAxDQ8B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMlC,c","file":"static/js/main.e6bc550d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction card(props) {\r\n    return (\r\n        <div classname=\"card\">\r\n            <div className=\"image\" key={props.id}\r\n            onClick={() => props.handleClick(props.id, props.clicked)}>\r\n                <img   src={props.image} alt={props.name} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction title(props) {\r\n  return <h3 className=\"title\">{props.children}</h3>;\r\n}\r\n\r\nexport default title;","import React, { Component } from 'react';\nimport CharacterCard from \"./components/Cards\";\n// import Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  state = {\n    cards: cards,\n    score: 0,\n    topScore: 0,\n    message: \"Click on a different card each time to earn points!\"\n  };\n  handleClick = (id, clicked) => {\n\n    const cardOrder = this.state.cards;\n\n    if (clicked) {\n      cardOrder.forEach((card, index) => {\n        cardOrder[index].clicked = false;\n      });\n      return this.setState({\n        card: cardOrder.sort(() => Math.random() - 0.5),\n        message: \"You guessed wrong!\",\n        score: 0\n      })\n    }\n    else {\n      cardOrder.forEach((card, index) => {\n        if (id === card.id) {\n          cardOrder[index].clicked = true;\n        }\n      });\n\n      const { topScore, score } = this.state;\n      const newScore = score + 1;\n      const newTopScore = newScore > topScore ? newScore : topScore;\n\n      return this.setState({\n        card: cardOrder.sort(() => Math.random() - 0.5),\n        message: \"You guessed right!\",\n        score: newScore,\n        topScore: newTopScore,\n      })\n    }\n  };\n\n\n  render() {\n    return (\n      <div>\n\n        <Wrapper>\n          <Title>\n            <div className=\"text-center\">\n              <h1 id=\"message-title\">{this.state.message}</h1>\n            </div>\n            <div className=\"gameScores text-center\">\n              <p><strong>Score:</strong> {this.state.score} | <strong>Top Score:</strong> {this.state.topScore}</p>\n            </div>\n          </Title>\n          {console.log(this.state.cards)}\n          <div className=\"row\">\n            {this.state.cards.map(cards => {\n\n              return (\n\n\n                <div className=\"col-sm-3 mt-5\"> <CharacterCard\n                  id={cards.id}\n                  key={cards.id}\n                  image={cards.image}\n                  name={cards.name}\n                  card={cards.card}\n                  clicked={cards.clicked}\n                  handleClick={this.handleClick}\n                /></div>\n\n\n              )\n\n\n            })}  </div>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}